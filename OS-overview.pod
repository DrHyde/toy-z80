=head1 OPERATING SYSTEM OVERVIEW

=head2 HARDWARE

There is 64K of memory and maximum of 256 ports.  Input ports are
arranged in pairs - the first of each pair, when read, will tell
how many bytes are available to be read.  The second is where
actual data is available.

=head3 PORTS

=head4 OUTPUT

=over

=item 0 - mem_bank

Write either 0, 1, 2 or 3 to indicate which chunk of memory to bank
(meaning the 16K chunk starting at N * 0x4000) following by a byte
indicating which ROM or which extra chunk of RAM to map in.

=item 1 - mem_unbank

Write either 0, 1, 2 or 3 to indicate which chunk of memory to unbank.

=item 2 - io_wr_stdout

Write a byte to the host machine's STDOUT.

=item 0xFF - hw_start_clock

Starts the machine clock.  The clock generates NMIs.  Writing anything
to this port works.

=back

=head4 INPUT

=head2 BOOT LOADER

The machine starts with PC = 0x0000, the Boot ROM paged in at 0x0000.
It will (eventually) allow choosing various OSes. For now however it
assumes that the OS ROM paged in at 0x4000.

The Boot loader first copies some code to the top of memory, then
jumps to it.  That code disables the Boot ROM, copies the first
256 bytes of the OS from the OS ROM to 0x0000, disables the
OS ROM, starts the clock, then jumps to 0x0000.

=head2 BOOTING THE OS

There's just a few bytes 0x0000, and a jump past the RST block.

The OS stack is initialised at 0x4000 (remember we decrement before push)
and the memory-map reset.

The root fs is mounted.

/boot is executed.

Finally, file C</bin/shell.cmd> has memory allocated, is loaded, and is
executed.

=head1 MEMORY MAP

    0x0000 to 0x4000: OS code and data
      ... to 0x005F: OS stack
      0x0060 to 0x0061: SP storage
      0x0062 to 0x0065: clock counter
      0x0066 to ...: NMI
      0x1F20 to 0x3EFF: process table (32 bytes per)
        0x00 to 0x08: ASCIIZ name - 0x00 in first byte means no process
        0x09 to 0x0A: SP
        0x0B to 0x0C: HL
        0x0D to 0x0E: BC
        0x0F to 0x10: DE
        0x11 to 0x12: AF
        0x13 to 0x14: IX
        0x15 to 0x16: IY
        0x17 to 0x19: memory banks currently mapped (0x00 means "meh", 0x01 is unavailable)
        0x1A:         PPID
        0x1B:         sleep cycles remaining
        0x1C to 0x1F: 4 bytes for file handles?
      0x3F00 to 0x3FFF: memory bank allocation table
        one byte per proc, 0x00 means available, 0xFF means OS, anything
        else is a PID

=head1 ACCESS TO OS FUNCTIONS FROM USER CODE

To execute the function, C<RST 1>. RST 1 itself is not re-entrant. Input
parameters are pointed to by IX. IY contains the address of a big enough
chunk of memory for the output.

=head1 NMIs

The NMI increments a 32-bit clock counter in memory and may, if
we're not inside RST 1, perform a task switch.

=head2 RST 1

This function switches to the alternate register set, pages in the OS ROM
and runs the relevant function. When that function returns, the OS ROM is
paged back out and registers restored.

=head1 PROCESSES

User processes may be loaded and executed at any address.
Consequently they should not use any absolute addresses in their code.

Up to 255 concurrent processes are supported, numbered 1 to 255 (there is no PID 0).

Associated with each process is a control structure.  This is stored
at 0x1F20 + 0x20 * (PID - 1) and consists of:

